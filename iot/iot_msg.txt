1. 复数的资源路径代表集合操作, 非复数的资源路径代表具体某一资源对象:
   /users/         =>   /user/<user_id>/
   /clients/       =>   /client/<client_id>/
   /devices/       =>   /device/<device_id>/
   /device_agents/ =>   /device_agent/<device_agent_id>/

2. 4种基本消息类型:
   request:  请求者发送的4种请求消息(get|post|put|delete, 要不要直接放在request/路径目录下??)
   response: 管理者发送的回应消息
   event:    终端自己产生的事件消息, 无需回应消息
   notify:   来自管理者发送的通知消息, 无需回应消息

   传输方向:
     外部使用者    -- request -->     资源本身或其管理者
                  <-- response --
                  <-- event --
                   -- notify -->

   用户(user)的管理者为主服务器(用户服务)
   设备端(device)的管理者为设备代理(device_agent)或其自身(device)
   设备代理(device_agent)的管理者为主服务器(设备服务)

3. 消息格式:
   MQTT主题: 即目标路径, 消息类型放前，资源路径在后，如/request/device/<device_id>
   JSON消息体:
      from:     源路径, 标记此消息由谁产生, 如/client/<client_id>
      msgid:    消息id, 相对消息源的发送唯一标记, 如请求者发送request请求消息, 
                管理者回应时需带上此id, 并发送回应消息至源路径/response目录下,
                同一请求者发送消息id不可相同或重复, 不同请求者可能发送相同消息id
   ?? action:   4种请求操作: get|post|put|delete, 仅对request类消息必须附带
      result:   错误码, 0表示成功, 仅对response类消息必须附带

   例: 客户端(client)获取通道参数配置
       /request/device/<device_id>/channel/<channel_id>/config
       { "from": "/client/<client_id>",
         "msgid": 1234,
         "action": "get",
         "body": { } }

       设备代理(device_agent)回应通道参数请求
       /response/client/<client_id>
       { "from": "/device_agent/<device_agent_id>",
         "msgid": 1234,
         "result": 0,
         "body": { "venc": "h264", "aenc": "aac", "fps": 25, "bps": "1024k" } }

4. 发布消息原则:
   请求者发送请求消息至/request资源路径目录下.
   管理者订阅/request资源路径目录, 并将处理结果发至/response请求者目录下.

       用户(user)一般以客户端(client)登陆, 则发送请求消息到
       /request/client/<client_id>/
          PUB: client
          SUB: server

       主服务器(用户服务)订阅此目录, 并将处理结果返回到
       /response/client/<client_id>/ 客户端(client)订阅此目录, 做为接收消息回应
          PUB: all
          SUB: client
       
       主服务器(用户服务)向用户(所有登陆端)推送通知
       /notify/user/<user_id>/ 
          PUB: all
          SUB: client

       向当前登陆的所有客户端推送通知
       /notify/clients
          PUB: all
          SUB: client

       主服务器(用户服务)向指定客户端推送通知
       /notify/client/<client_id>/
          PUB: all
          SUB: client

       /request/device/<device_id>
          PUB: all
          SUB: device_agent

       /response/device/<device_id>
          PUB: server
          SUB: device_agent

       /event/device/<device_id>
          PUB: device_agent
          SUB: all

       /request/device_agent/<device_agent_id>
          PUB: device_agent
          SUB: server

       /response/device_agent/<device_agent_id>
          PUB: server
          SUB: device_agent

   例:/request/client/<client_id>     查询客户端登陆信息(action: get)
      /request/devices                添加设备(action: post)
      /response/client/<client_id>    回应客户端请求
      /event/device/<device_id>/sensor/<sensor_id> 探头输入报警
      /notify/clients                 通知所有客户端

5. MQTT connect: 用户登陆/设备登陆/设备代理登陆
   /user/<user_id>/login
   /device/<device_id>/login
   /device_agent/<device_agent_id>/login

5.1 JSON元数据：可能在多条或多种消息内出现，做为共同结构体表示
   user: {
       //以下字段必选, 出现于所有含device元数据的消息中
       id:         数字, 非空, 不为0(除添加用户消息/post/users外）
       name:       
       area_id:    数字, 

       //以下字段可选, 根据权限或特定消息需要时出现
       password；
       devices: [{device},{device},...]
   }

   area: {
       //
       id:         数字, 非空, 不为0(除添加区域消息/post/areas外）
       name:
       parent_id: 

       //
       children: [{area},{area},...]
       users: [{user},{user},...]
       devices: [{device},{device},...]
   }

   device: {
       //必选
       id:         数字, 非空, 不为0(除添加设备消息/post/devices外）
       name:       字串, 
       agent_id:   数字, 为0表示私有设备, 无需代理
       owner_id:   数字, 为0表示无所有者
       area_id:    数字, 
       status:

       //可选
       factory:    字串, 非空
       net_addr:   字串, 网络地址(ip或域名)
       net_port:   数字, 网络端口
       login_user: 字串, 
       login_pwd:  字串, 
       private_sn:

       channels: [{channel},{channel},...] 通道信息元数据
       sensors: [{sensor},{sensor},...]
       disks: [{disk},{disk},...]
       
       agent_name: 字串, 
       owner_name: 字串, 
       area_name:  字串, 
   }

   device_agent: {
       id:
       name:
       reg_sn:
       
       devices: [{device},{device},...]
   }

   channel: {
       id: 
       name:
       device_id:

       streams: [{stream},{stream},...]
       ptz:
   }

   stream: { }